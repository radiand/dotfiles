#!/usr/bin/env python3

import argparse
import json
import logging
import re
import shutil
import tomllib
import unittest
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime, timezone
from pathlib import Path
from typing import Self


class Log:
    """Structured log for builtin python logging.

    Usage:
        >>> logger.info(Log("event_name"), key=value, key2=value2)

    """

    def __init__(self, event: str, **kwargs):
        self.event = event
        self.kwargs = kwargs

    def __str__(self):
        return f"{self.event} :: {json.dumps(self.kwargs, default=str)}"


logging.basicConfig(format="[%(levelname)s] %(asctime)s %(message)s", level=logging.DEBUG)
LOGGER = logging.getLogger(__name__)


@dataclass(frozen=True)
class Uid:
    value: str

    @classmethod
    def now(cls) -> Self:
        now_dt = datetime.now(tz=timezone.utc)
        return cls.from_datetime(now_dt)

    @classmethod
    def from_datetime(cls, dt: datetime) -> Self:
        uid_fmt = "%Y%m%dT%H%M%SZ"
        return cls(dt.strftime(uid_fmt))

    def __str__(self) -> str:
        return self.value


def collect_uids(text: str) -> list[Uid]:
    uid_pattern = r"\d{4}\d{2}\d{2}T\d{2}\d{2}\d{2}Z"
    matches = re.findall(pattern=uid_pattern, string=text)
    return list(map(Uid, matches))


def quoted(string: str) -> str:
    return f'"{string}"'


def quotedlist(array: list[str]) -> str:
    return "[{0}]".format(", ".join(map(quoted, array)))


@dataclass
class ZkHeader:
    title: str
    timestamp: datetime
    uid: Uid
    tags: set[str]
    referred_from: set[Uid]
    refers_to: set[Uid]

    @classmethod
    def from_str(cls, string: str) -> "ZkHeader":
        data = tomllib.loads(string)
        timestamp = data["timestamp"]

        if isinstance(timestamp, str):
            data["timestamp"] = datetime.fromisoformat(timestamp)

        data["uid"] = Uid(data["uid"])
        data["referred_from"] = set(map(Uid, data["referred_from"]))
        data["refers_to"] = set(map(Uid, data["refers_to"]))
        data["tags"] = set(data["tags"])

        return cls(**data)

    def to_str(self) -> str:
        title = quoted(self.title)
        timestamp = quoted(self.timestamp.isoformat())
        uid = quoted(str(self.uid))
        tags = quotedlist(sorted(list(self.tags)))
        referred_from = quotedlist(sorted(list(map(str, self.referred_from))))
        refers_to = quotedlist(sorted(list(map(str, self.refers_to))))

        return "\n".join(
            [
                f"title = {title}",
                f"timestamp = {timestamp}",
                f"uid = {uid}",
                f"tags = {tags}",
                f"referred_from = {referred_from}",
                f"refers_to = {refers_to}",
            ]
        )

    def refer_from(self, uid: Uid | set[Uid]) -> None:
        uids = uid if isinstance(uid, set) else set([uid])
        self.referred_from.update(uids)

    def refer_to(self, uid: Uid | set[Uid]) -> None:
        uids = uid if isinstance(uid, set) else set([uid])
        self.refers_to.update(uids)


@dataclass
class ZkFile:
    header: ZkHeader
    body: str

    @classmethod
    def from_str(cls, string: str) -> "ZkFile":
        zk_header = ZkHeader.from_str(cls.extract_fenced_header(string))
        header_pos = [m.end() for m in re.finditer("```", string)][1]
        zk_body = string[header_pos:].strip()
        return cls(zk_header, zk_body)

    def to_str(self) -> str:
        return "\n".join(
            [
                "```toml",
                self.header.to_str(),
                "```",
                "",
                self.body,
            ]
        )

    @property
    def filename(self) -> str:
        return f"{self.header.uid}.md"

    @staticmethod
    def extract_fenced_header(string: str) -> str:
        pattern = r"^```(?:\w+)?\s*\n(.*?)(?=^```)```"
        result = re.findall(pattern, string, re.DOTALL | re.MULTILINE)
        return result[0]


FilesMap = dict[Uid, ZkFile]


def to_map(files: list[ZkFile]) -> FilesMap:
    return {file.header.uid: file for file in files}


class ZkFileRepository:
    """Loads and saves zettelkasten files."""

    def __init__(self, zk_root: Path) -> None:
        self._zk_root = zk_root

    def load_all(self) -> list[ZkFile]:
        files: list[ZkFile] = []
        for zk_file in self._zk_root.glob("*"):
            with open(zk_file) as f:
                content = f.read()
                zk_file = ZkFile.from_str(content)
                files.append(zk_file)
        return files

    def save_all(self, files: list[ZkFile]) -> None:
        for file in files:
            with open(self._zk_root / file.filename, "w") as f:
                f.write(file.to_str())


class BackupCommand:
    def __init__(self, zk_root: Path, backup_root: Path) -> None:
        self._zk_root = zk_root
        self._backup_root = backup_root

    def run(self) -> None:
        destination = self._backup_root / f"ZK-{Uid.now()}"
        shutil.copytree(self._zk_root, destination)
        LOGGER.info(Log("backup_finished", source=self._zk_root, destination=destination))


class ReferencesCommand:
    """Create (or fix) references between files in ZK headers."""

    def run(self, files: list[ZkFile]) -> list[ZkFile]:
        refmap: dict[Uid, set[Uid]] = defaultdict(set)
        filesmap = to_map(files)
        for zk_file in filesmap.values():
            # Clear exisiting ones, assuming that they are outdated.
            zk_file.header.refers_to = set()
            zk_file.header.referred_from = set()
            refmap[zk_file.header.uid].update(collect_uids(zk_file.body))

        for source, destinations in refmap.items():
            if not destinations:
                continue

            # Prevent self-references.
            destinations.discard(source)

            LOGGER.info(Log("references_found", source=source, destinations=list(destinations)))
            filesmap[source].header.refer_to(destinations)
            for dst in destinations:
                filesmap[dst].header.refer_from(source)

        return list(filesmap.values())


# --------------------------------------------------------------------------------------------------
# Tests (run with $./zettelkasten tests)
# --------------------------------------------------------------------------------------------------
def make_zk(
    body: str,
    timestamp: datetime,
    title: str = "ZK TITLE",
    referred_from: set[Uid] = set(),
    refers_to: set[Uid] = set(),
) -> ZkFile:
    """Shorthand factory for ZkFiles."""
    zk_header = ZkHeader(
        title=title,
        uid=Uid.from_datetime(timestamp),
        timestamp=timestamp,
        tags=set(),
        referred_from=referred_from,
        refers_to=refers_to,
    )
    return ZkFile(header=zk_header, body=body)


class TestCommonFunctionalities(unittest.TestCase):
    def test_serialize_and_deserialize(self) -> None:
        zk_file = make_zk(
            body="ZK_BODY",
            timestamp=datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc),
            referred_from=set([Uid.now()]),
        )
        self.assertEqual(ZkFile.from_str(zk_file.to_str()), zk_file)


class TestReferencesCommand(unittest.TestCase):
    def test_references_are_added(self) -> None:
        # GIVEN
        src_dt = datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc)
        dst_dt = datetime(2023, 1, 2, 0, 0, 0, tzinfo=timezone.utc)

        src_zk = make_zk(
            body="This ZK mentions [[{0}.md]]".format(Uid.from_datetime(dst_dt)),
            timestamp=src_dt,
        )
        dst_zk = make_zk(body="Blah, blah", timestamp=dst_dt)

        # WHEN
        results = to_map(ReferencesCommand().run([src_zk, dst_zk]))

        # THEN
        result_src_zk = results[Uid.from_datetime(src_dt)]
        self.assertEqual(result_src_zk.header.refers_to, set([Uid.from_datetime(dst_dt)]))
        self.assertEqual(result_src_zk.header.referred_from, set())

        result_dst_zk = results[Uid.from_datetime(dst_dt)]
        self.assertEqual(result_dst_zk.header.refers_to, set())
        self.assertEqual(result_dst_zk.header.referred_from, set([Uid.from_datetime(src_dt)]))

    def test_references_are_removed(self) -> None:
        # GIVEN
        src_dt = datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc)
        dst_dt = datetime(2023, 1, 2, 0, 0, 0, tzinfo=timezone.utc)

        src_zk = make_zk(
            body="This ZK mentioned dst before, now it does not",
            timestamp=src_dt,
            refers_to=set([Uid.from_datetime(dst_dt)]),
        )
        dst_zk = make_zk(
            body="Blah, blah", timestamp=dst_dt, referred_from=set([Uid.from_datetime(src_dt)])
        )

        # WHEN
        results = to_map(ReferencesCommand().run([src_zk, dst_zk]))

        # THEN
        result_src_zk = results[Uid.from_datetime(src_dt)]
        self.assertEqual(result_src_zk.header.refers_to, set())
        self.assertEqual(result_src_zk.header.referred_from, set())

        result_dst_zk = results[Uid.from_datetime(dst_dt)]
        self.assertEqual(result_dst_zk.header.refers_to, set())
        self.assertEqual(result_dst_zk.header.referred_from, set())

    def test_self_references_are_not_added(self) -> None:
        # GIVEN
        dt = datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc)
        zk = make_zk(
            body="This ZK refers itself: [[{0}.md]]".format(Uid.from_datetime(dt)),
            timestamp=dt,
        )

        # WHEN
        results = ReferencesCommand().run([zk])

        # THEN
        self.assertEqual(results[0].header.referred_from, set())
        self.assertEqual(results[0].header.refers_to, set())


# --------------------------------------------------------------------------------------------------
# CLI entrypoint
# --------------------------------------------------------------------------------------------------


def get_args():
    parser = argparse.ArgumentParser(prog="zettelkasten")
    subparsers = parser.add_subparsers(help="commands", dest="command", required=True)

    tests_subparser = subparsers.add_parser("tests", help="run test suite")

    references_subparser = subparsers.add_parser(
        "references", help="scan zk files and set references"
    )
    references_subparser.add_argument("path", type=Path)

    return parser.parse_args()


if __name__ == "__main__":
    args = get_args()
    if args.command == "tests":
        unittest.main(argv=["zettelkasten"], verbosity=2)
    elif args.command == "references":
        zk_root = Path(args.path)
        BackupCommand(zk_root, Path("/tmp")).run()

        repository = ZkFileRepository(zk_root)
        zk_files = repository.load_all()
        zk_files_modified = ReferencesCommand().run(zk_files)
        repository.save_all(zk_files_modified)
