#!/usr/bin/env python3
import argparse
import re
import shutil
import sys
import tomllib
import unittest
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime, timezone
from operator import attrgetter
from pathlib import Path
from typing import Self


class Logger:
    """Allows printing on demand."""

    def __init__(self, verbose: bool) -> None:
        self._verbose = verbose

    def print(self, *args, **kwargs) -> None:
        if not self._verbose:
            return
        print(*args, **kwargs)


LOGGER = Logger(verbose=False)
TIMESTAMP_FMT = "%Y-%m-%dT%H:%M:%S%z"


def now() -> datetime:
    return datetime.now(tz=timezone.utc)


def datetime_to_str(dt: datetime) -> str:
    return dt.strftime(TIMESTAMP_FMT)


def str_to_datetime(dt: str) -> datetime:
    return datetime.strptime(dt, TIMESTAMP_FMT)


@dataclass(frozen=True)
class Config:
    path: Path

    @classmethod
    def from_toml(cls, path: Path) -> "Config":
        with open(path) as f:
            content = tomllib.loads(f.read())
            zk_root_path = content.get("path")
            if not zk_root_path:
                raise RuntimeError("Missing 'path' key in toml config")
            return cls(path=Path(zk_root_path).expanduser())


@dataclass(frozen=True)
class Uid:
    value: str

    @classmethod
    def now(cls) -> Self:
        return cls.from_datetime(now())

    @classmethod
    def from_datetime(cls, dt: datetime) -> Self:
        uid_fmt = "%Y%m%dT%H%M%SZ"
        return cls(dt.strftime(uid_fmt))

    def __str__(self) -> str:
        return self.value


class TomlRender:
    def __init__(self, indent: int = 4, max_width: int = 80) -> None:
        self._indent = indent
        self._max_width = max_width

    def dumps(self, item: str | list[str]) -> str:
        if isinstance(item, str):
            return self._quoted(item)

        if isinstance(item, list):
            one_line = self._quoted_list(item)
            if len(one_line) <= self._max_width:
                return one_line
            return self._quoted_list_multiline(item)

        raise RuntimeError("Cannot render to toml: {0}".format(item))

    def _quoted_list_multiline(self, array: list[str]) -> str:
        retval = "[\n"
        for item in array:
            retval += "{indent}{item},\n".format(indent=" " * self._indent, item=self._quoted(item))
        retval += "]"
        return retval

    def _quoted(self, text: str) -> str:
        return f'"{text}"'

    def _quoted_list(self, array: list[str]) -> str:
        return "[{0}]".format(", ".join(map(self._quoted, array)))


def collect_uids(text: str) -> list[Uid]:
    uid_pattern = r"\d{4}\d{2}\d{2}T\d{2}\d{2}\d{2}Z"
    matches = re.findall(pattern=uid_pattern, string=text)
    return list(map(Uid, matches))


@dataclass
class ZkHeader:
    title: str
    timestamp: datetime
    uid: Uid
    tags: set[str]
    referred_from: set[Uid]
    refers_to: set[Uid]

    @classmethod
    def from_str(cls, string: str) -> "ZkHeader":
        data = tomllib.loads(string)
        timestamp = data["timestamp"]

        if isinstance(timestamp, str):
            data["timestamp"] = str_to_datetime(timestamp)

        data["uid"] = Uid(data["uid"])
        data["referred_from"] = set(map(Uid, data["referred_from"]))
        data["refers_to"] = set(map(Uid, data["refers_to"]))
        data["tags"] = set(data["tags"])

        return cls(**data)

    def to_str(self) -> str:
        tr = TomlRender(indent=4, max_width=72)
        title = tr.dumps(self.title)
        timestamp = tr.dumps(datetime_to_str(self.timestamp))
        uid = tr.dumps(str(self.uid))
        tags = tr.dumps(sorted(list(self.tags)))
        referred_from = tr.dumps(sorted(list(map(str, self.referred_from))))
        refers_to = tr.dumps(sorted(list(map(str, self.refers_to))))

        return "\n".join(
            [
                f"title = {title}",
                f"timestamp = {timestamp}",
                f"uid = {uid}",
                f"tags = {tags}",
                f"referred_from = {referred_from}",
                f"refers_to = {refers_to}",
            ]
        )

    def refer_from(self, uid: Uid | set[Uid]) -> None:
        uids = uid if isinstance(uid, set) else set([uid])
        self.referred_from.update(uids)

    def refer_to(self, uid: Uid | set[Uid]) -> None:
        uids = uid if isinstance(uid, set) else set([uid])
        self.refers_to.update(uids)


@dataclass
class ZkFile:
    header: ZkHeader
    body: str

    @classmethod
    def from_str(cls, string: str) -> "ZkFile":
        zk_header = ZkHeader.from_str(cls.extract_fenced_header(string))
        header_pos = [m.end() for m in re.finditer("```", string)][1]
        zk_body = string[header_pos:].strip()
        return cls(zk_header, zk_body)

    def to_str(self) -> str:
        return "\n".join(
            [
                "```toml",
                self.header.to_str(),
                "```",
                "",
                self.body,
            ]
        ).strip()  # Delete trailing whitespaces if body is empty.

    @property
    def filename(self) -> str:
        return f"{self.header.uid}.md"

    @staticmethod
    def extract_fenced_header(string: str) -> str:
        pattern = r"^```(?:\w+)?\s*\n(.*?)(?=^```)```"
        result = re.findall(pattern, string, re.DOTALL | re.MULTILINE)
        return result[0]


FilesMap = dict[Uid, ZkFile]


def to_map(files: list[ZkFile]) -> FilesMap:
    return {file.header.uid: file for file in files}


class ZkFileRepository:
    """Loads and saves zettelkasten files."""

    def __init__(self, zk_root: Path) -> None:
        self._zk_root = zk_root

    def load_all(self) -> list[ZkFile]:
        files: list[ZkFile] = []
        for zk_file_path in self._zk_root.glob("*"):
            with open(zk_file_path) as f:
                content = f.read()
                zk_file = ZkFile.from_str(content)
                files.append(zk_file)
        return files

    def save_all(self, files: list[ZkFile]) -> None:
        for file in files:
            with open(self._zk_root / file.filename, "w") as f:
                f.write(file.to_str())


class CreateCommand:
    def __init__(self, zk_root: Path) -> None:
        self._zk_root = zk_root

    def create_and_save(self) -> None:
        zk_file = self._create_zk_file()
        save_path = self._zk_root / zk_file.filename
        ZkFileRepository(zk_root=self._zk_root).save_all([zk_file])
        print(save_path)

    def create_and_print(self) -> None:
        print(self._create_zk_file().to_str())

    @staticmethod
    def _create_zk_file() -> ZkFile:
        timestamp = now()
        zk_header = ZkHeader(
            title="",
            uid=Uid.from_datetime(timestamp),
            timestamp=timestamp.astimezone(),  # in local timezone
            tags=set(),
            referred_from=set(),
            refers_to=set(),
        )
        return ZkFile(header=zk_header, body="")


class BackupCommand:
    def __init__(self, zk_root: Path, backup_root: Path) -> None:
        self._zk_root = zk_root
        self._backup_root = backup_root

    def run(self) -> None:
        destination = self._backup_root / f"ZK-{Uid.now()}"
        shutil.copytree(self._zk_root, destination)
        LOGGER.print(f"Created backup from {self._zk_root} to {destination}")


class ReferencesCommand:
    """Create (or fix) references between files in ZK headers."""

    def run(self, files: list[ZkFile]) -> list[ZkFile]:
        refmap: dict[Uid, set[Uid]] = defaultdict(set)
        filesmap = to_map(files)
        for zk_file in filesmap.values():
            # Clear exisiting ones, assuming that they are outdated.
            zk_file.header.refers_to = set()
            zk_file.header.referred_from = set()
            refmap[zk_file.header.uid].update(collect_uids(zk_file.body))

        for source, destinations in refmap.items():
            if not destinations:
                continue

            # Prevent self-references.
            destinations.discard(source)

            LOGGER.print(f"Referencing {source} with {[uid.value for uid in destinations]}")
            filesmap[source].header.refer_to(destinations)
            for dst in destinations:
                filesmap[dst].header.refer_from(source)

        return list(filesmap.values())


class ZkQuery:
    def __init__(self, files: list[ZkFile]) -> None:
        self._files = files.copy()

    def tags(self, tags: list[str] | None) -> "ZkQuery":
        if not tags:
            return self
        filtered_files = []
        for file in self._files:
            if all(tag in file.header.tags for tag in tags):
                filtered_files.append(file)
        return ZkQuery(filtered_files)

    def __iter__(self):
        return iter(self._files)


class FormatCommand:
    def run(self, files: list[ZkFile]) -> str:
        template = "{uid} | {title:<{title_width}} | {tags}"
        title_width = self._max_char_width(files, key="header.title")
        lines: list[str] = []

        for file in sorted(files, key=lambda file: file.header.timestamp):
            lines.append(
                template.format(
                    uid=file.header.uid,
                    title=file.header.title,
                    title_width=title_width,
                    tags=" ".join(file.header.tags),
                )
            )

        return "\n".join(lines)

    @staticmethod
    def _max_char_width(files: list[ZkFile], key: str) -> int:
        return max(len(str(attrgetter(key)(file))) for file in files)


# --------------------------------------------------------------------------------------------------
# Tests (run with $./zettelkasten tests)
# --------------------------------------------------------------------------------------------------
def make_zk(
    body: str,
    timestamp: datetime,
    title: str = "ZK TITLE",
    referred_from: set[Uid] = set(),
    refers_to: set[Uid] = set(),
    tags: set[str] = set(),
) -> ZkFile:
    """Shorthand factory for ZkFiles."""
    zk_header = ZkHeader(
        title=title,
        uid=Uid.from_datetime(timestamp),
        timestamp=timestamp,
        tags=tags,
        referred_from=referred_from,
        refers_to=refers_to,
    )
    return ZkFile(header=zk_header, body=body)


class TestCommonFunctionalities(unittest.TestCase):
    def test_serialize_and_deserialize(self) -> None:
        zk_file = make_zk(
            body="ZK_BODY",
            timestamp=datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc),
            referred_from=set([Uid.now()]),
        )
        self.assertEqual(ZkFile.from_str(zk_file.to_str()), zk_file)


class TestCreatingNote(unittest.TestCase):
    def test_create_and_save(self) -> None:
        from contextlib import redirect_stdout
        from io import StringIO
        from tempfile import TemporaryDirectory

        # GIVEN
        with TemporaryDirectory() as tmp_dir:
            tmp_dir_path = Path(tmp_dir)
            stdout_buffer = StringIO()
            with redirect_stdout(stdout_buffer):
                # WHEN
                CreateCommand(tmp_dir_path).create_and_save()
            captured_stdout = stdout_buffer.getvalue().strip()
            # THEN Verify if command prints the path to the file it just created
            self.assertTrue(Path(captured_stdout).is_file())


class TestReferencesCommand(unittest.TestCase):
    def test_references_are_added(self) -> None:
        # GIVEN
        src_dt = datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc)
        dst_dt = datetime(2023, 1, 2, 0, 0, 0, tzinfo=timezone.utc)

        src_zk = make_zk(
            body="This ZK mentions [[{0}.md]]".format(Uid.from_datetime(dst_dt)),
            timestamp=src_dt,
        )
        dst_zk = make_zk(body="Blah, blah", timestamp=dst_dt)

        # WHEN
        results = to_map(ReferencesCommand().run([src_zk, dst_zk]))

        # THEN
        result_src_zk = results[Uid.from_datetime(src_dt)]
        self.assertEqual(result_src_zk.header.refers_to, set([Uid.from_datetime(dst_dt)]))
        self.assertEqual(result_src_zk.header.referred_from, set())

        result_dst_zk = results[Uid.from_datetime(dst_dt)]
        self.assertEqual(result_dst_zk.header.refers_to, set())
        self.assertEqual(result_dst_zk.header.referred_from, set([Uid.from_datetime(src_dt)]))

    def test_references_are_removed(self) -> None:
        # GIVEN
        src_dt = datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc)
        dst_dt = datetime(2023, 1, 2, 0, 0, 0, tzinfo=timezone.utc)

        src_zk = make_zk(
            body="This ZK mentioned dst before, now it does not",
            timestamp=src_dt,
            refers_to=set([Uid.from_datetime(dst_dt)]),
        )
        dst_zk = make_zk(
            body="Blah, blah", timestamp=dst_dt, referred_from=set([Uid.from_datetime(src_dt)])
        )

        # WHEN
        results = to_map(ReferencesCommand().run([src_zk, dst_zk]))

        # THEN
        result_src_zk = results[Uid.from_datetime(src_dt)]
        self.assertEqual(result_src_zk.header.refers_to, set())
        self.assertEqual(result_src_zk.header.referred_from, set())

        result_dst_zk = results[Uid.from_datetime(dst_dt)]
        self.assertEqual(result_dst_zk.header.refers_to, set())
        self.assertEqual(result_dst_zk.header.referred_from, set())

    def test_self_references_are_not_added(self) -> None:
        # GIVEN
        dt = datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc)
        zk = make_zk(
            body="This ZK refers itself: [[{0}.md]]".format(Uid.from_datetime(dt)),
            timestamp=dt,
        )

        # WHEN
        results = ReferencesCommand().run([zk])

        # THEN
        self.assertEqual(results[0].header.referred_from, set())
        self.assertEqual(results[0].header.refers_to, set())


class TestZkQuery(unittest.TestCase):
    def test_passthrough(self) -> None:
        files = [
            make_zk(
                title="ZK{0}".format(index),
                body="ZK{0} body".format(index),
                timestamp=datetime(2023, 1, index, 0, 0, 0, tzinfo=timezone.utc),
            )
            for index in range(1, 3)
        ]
        self.assertEqual(files, list(ZkQuery(files)))

    def test_filter_tags(self) -> None:
        files = [
            make_zk(
                title="ZK1",
                body="<irrelevant>",
                tags={"lang:en"},
                timestamp=datetime(2023, 1, 1, 0, 0, 0, tzinfo=timezone.utc),
            ),
            make_zk(
                title="ZK2",
                body="<irrelevant>",
                tags={"lang:pl"},
                timestamp=datetime(2023, 1, 2, 0, 0, 0, tzinfo=timezone.utc),
            ),
        ]
        filtered = list(ZkQuery(files).tags(["lang:en"]))
        self.assertEqual(len(filtered), 1)
        self.assertEqual(filtered[0].header.title, "ZK1")


# --------------------------------------------------------------------------------------------------
# CLI entrypoint
# --------------------------------------------------------------------------------------------------
def get_args():
    parser = argparse.ArgumentParser(prog="zettelkasten")
    parser.add_argument("-v", "--verbose", action="store_true", help="print log messages")

    subparsers = parser.add_subparsers(help="commands", dest="command", required=True)

    tests_subparser = subparsers.add_parser("tests", help="run test suite")

    new_subparser = subparsers.add_parser("new", help="create new note")
    new_subparser.add_argument(
        "-s",
        "--stdout",
        action="store_true",
        help="print note header instead creating the file",
    )

    references_subparser = subparsers.add_parser(
        "references", help="scan zk files and set references"
    )
    query_subparser = subparsers.add_parser("query", help="query zk files")
    query_subparser.add_argument("-t", "--tag", action="append", type=str)

    return parser.parse_args()


if __name__ == "__main__":
    args = get_args()
    config = Config.from_toml(Path("~/.config/zettelkasten/config.toml").expanduser())

    LOGGER = Logger(verbose=True if args.verbose else False)  # verbose might be None

    if args.command == "tests":
        unittest.main(argv=["zettelkasten"], verbosity=2)
    elif args.command == "new":
        if args.stdout:
            CreateCommand(config.path).create_and_print()
        else:
            CreateCommand(config.path).create_and_save()
    elif args.command == "references":
        BackupCommand(zk_root=config.path, backup_root=Path("/tmp")).run()
        repository = ZkFileRepository(zk_root=config.path)
        zk_files = repository.load_all()
        zk_files_modified = ReferencesCommand().run(zk_files)
        repository.save_all(zk_files_modified)
    elif args.command == "query":
        zk_files = ZkFileRepository(zk_root=config.path).load_all()
        filtered_zk_files = ZkQuery(zk_files).tags(args.tag)

        if not filtered_zk_files:
            sys.exit(0)

        print(FormatCommand().run(list(filtered_zk_files)))
